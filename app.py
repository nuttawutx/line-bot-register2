import os
import json
import base64
import re
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from datetime import datetime
import pytz


load_dotenv()

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
GOOGLE_CREDENTIAL_BASE64 = os.getenv("GOOGLE_CREDENTIAL_BASE64")

app = Flask(__name__)
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

cred_path = "google-credentials.json"
if GOOGLE_CREDENTIAL_BASE64:
    with open(cred_path, "w") as f:
        f.write(base64.b64decode(GOOGLE_CREDENTIAL_BASE64).decode("utf-8"))

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(cred_path, scope)
client = gspread.authorize(creds)

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

SYSTEM_ACTIVE = os.getenv("SYSTEM_ACTIVE", "true").lower() == "true"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    if not SYSTEM_ACTIVE:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ö†Ô∏è ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß\n‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
        )
        return

    text = event.message.text
    user_id = event.source.user_id

    lines = text.strip().splitlines()
    if len(lines) != 6:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:\n‡∏ä‡∏∑‡πà‡∏≠:\n‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô:\n‡∏™‡∏≤‡∏Ç‡∏≤:\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô (DD-MM-YYYY):\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
        )
        return

    expected_keys = {"‡∏ä‡∏∑‡πà‡∏≠", "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"}
    data = {}
    for line in lines:
        if ":" not in line:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ ':' ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")
            )
            return
        key, val = line.split(":", 1)
        data[key.strip()] = val.strip()

    if set(data.keys()) != expected_keys:
        missing = expected_keys - set(data.keys())
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {', '.join(missing)}")
        )
        return

    if not re.match(r'^\d{1,2}-\d{1,2}-\d{4}$', data["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"]):
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô DD-MM-YYYY)")
        )
        return

    try:
        name = data.get("‡∏ä‡∏∑‡πà‡∏≠", "")
        nickname = data.get("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô", "")
        branch = data.get("‡∏™‡∏≤‡∏Ç‡∏≤", "")
        postion = data.get("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "")
        start = data.get("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "")
        emp_type = data.get("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "").strip().lower()

        if emp_type == "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô":
            worksheet = client.open("HR_EmployeeListMikka").worksheet("DailyEmployee")
            default_code = 20000
            prefix = ""
        elif emp_type == "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            worksheet = client.open("HR_EmployeeListMikka").worksheet("MonthlyEmployee")
            default_code = 60000
            prefix = "P"
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô '‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            )
            return

        existing = worksheet.get_all_values()
        last_row = existing[-1] if len(existing) > 1 else []
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏ä‡πà‡∏ô 'P60001' ‚Üí 60001)
        if len(last_row) >= 3:
            raw_code = last_row[2]
            number_part = int(re.sub(r'\D', '', raw_code)) if raw_code else default_code
        else:
            number_part = default_code

        new_code = number_part + 1
        emp_code = prefix+str(new_code)

        tz = pytz.timezone('Asia/Bangkok')
        now = datetime.now(tz).strftime("%d/%m/%Y %H:%M")

        worksheet.append_row(["", branch, emp_code, name, nickname, postion, start,"", emp_type, user_id, now])
        import requests


# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Webhook Apps Script
        webhook_url = os.getenv("APPS_SCRIPT_WEBHOOK")
        if webhook_url:
            try:
                sheet_name = worksheet.title  # ‡πÄ‡∏ä‡πà‡∏ô "DailyEmployee"
                r = requests.post(webhook_url, json={"sheet": sheet_name})
                
                print("Webhook Response:", r.text)
            except Exception as e:
                print("Webhook Error:", e)

        confirmation_text = (
            f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n"
            f"‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: {emp_code}\n"
            f"‡∏ä‡∏∑‡πà‡∏≠: {name}\n"
            f"‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏á‡∏≤‡∏ô: {postion}\n"
            f"‡∏™‡∏≤‡∏Ç‡∏≤: {branch}\n"
            f"‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô: {start}\n"
            f"üìå ‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"
        )
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=confirmation_text)
        )

    except Exception as e:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
